리얼타임 렌더링 엔진

게임들은 상호작용이필요 => 인터렉팅 => 입,출력이 필요
게임 엔진의 범용화
소스엔진
API 응용 프로그램 인터페이스 (페이스북, 구글계정으로 다른 사이트 로그인하는것. db연동)

요즘은 새로만드는 것보다 있는거(API) 가져다 잘쓰는것이 좋은 프로그래머

게임 API 를 제공한 것이 마이크로소프트의 다이렉트 엑스
맥을 지원 X
이것이 도스에서 윈도우로 넘어가게 된 계기

하복엔진
-> '물리'엔진. 물리연산. 물리력만 적용해준다. 하지만 그래픽은 다른 엔진이 해주어야함
강체동역학, 연체동역학, 유동역학

랜더링 DCC툴 - >3D MAX, MAYA

digital cntents creation -> 컨텐츠 제작

컴퓨터 그래픽스 용어 -> 랜더링

노말 메핑 (리얼타임 기술이 나온 계기. 꼼수)
하이폴리곤을 로우폴리곤으로 바꾸는 작업

이런 기술이 있어서 랜더링 엔진이 사용 가능해짐.

전화연결이 어떻게 진행 되는가
=> 우리는 이제는 잘 모른다. 현대기술을 가져다 쓰는 능력이 필요함

충돌 검출 및 충돌 반응 => 트리거, 인터렉션, 조건결과 라는 용어로 불린다.

사운드 출력
- 인코딩 된 오디오를 디코딩
게임엔진으로 작곡? 사운드?

프로그래밍 스크립트 (보통 코딩을 한다고 말하면 이것임)
(자바스크립트, c++ 등)

인공지능 (Finite State Machine) 기계의 패턴화된 움직임.

네트워크 엔진.  ( ex, 포톤, 머치이퍼런트, electroserver, smartfox, 프라우드 넷)

스트리밍 (픽셀스트리밍 기술)

메모리관리 ( 게임을 만들어본 엔진이다. 그동안 수많은 오류, 버그들이잡혔을것. 쓰레기 오브젝트들이 쌓인걸 알아서 지워줌)

쓰레딩 => 하나의 프로그램에 동시에 여러개의 일을 수행. 
(유니티는 단일, 언리얼은 다중)

씬 그래프 -> 화면에 출력되는 3d기하 구조들을 관리하기 위한 자료구조, 비쥬얼적 도면



